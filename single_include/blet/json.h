// Generated by amalgamate.py
#ifndef _AMALGAMATE_GUARD__SINGLE_INCLUDE_BLET_JSON_H_
#define _AMALGAMATE_GUARD__SINGLE_INCLUDE_BLET_JSON_H_

// Copy from include/blet/json.h

#ifndef _BLET_JSON_H_
#define _BLET_JSON_H_

#include <exception> // std::exception
#include <sstream>   // std::istream, std::ostream, std:ostringstream
#include <string>    // std::string

// #include "blet/dict.h"

// Copy from Dict/single_include/blet/dict.h

// Generated by amalgamate.py
#ifndef _AMALGAMATE_GUARD__SINGLE_INCLUDE_BLET_DICT_H_
#define _AMALGAMATE_GUARD__SINGLE_INCLUDE_BLET_DICT_H_

// Copy from include/blet/dict.h

/**
 * dict.h
 *
 * Licensed under the MIT License <http://opensource.org/licenses/MIT>.
 * Copyright (c) 2022-2023 BLET MickaÃ«l.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef _BLET_DICT_H_
#define _BLET_DICT_H_

#include <deque>     // std::deque
#include <exception> // std::exception
#include <list>      // std::list
#include <map>       // std::map
#include <queue>     // std::queue
#include <set>       // std::set
#include <sstream>   // std::istream, std::ostream, std:ostringstream
#include <stack>     // std::stack
#include <string>    // std::string
#include <vector>    // std::vector

namespace blet {

class Dict {
  public:
    typedef bool boolean_t;
    typedef double number_t;
    typedef std::string string_t;
    typedef std::vector<Dict> array_t;
    typedef std::map<std::string, Dict> object_t;

    union UValue {
        boolean_t boolean;
        number_t number;
        string_t* string;
        array_t* array;
        object_t* object;
    };

    enum EType {
        NULL_TYPE = 0,
        BOOLEAN_TYPE,
        NUMBER_TYPE,
        STRING_TYPE,
        ARRAY_TYPE,
        OBJECT_TYPE
    };

  protected:
    UValue _value;
    EType _type;

  public:
    class Exception : public std::exception {
      public:
        Exception(const std::string& message);
        virtual ~Exception() throw();
        const char* what() const throw();

      protected:
        std::string _message;
    };

    /**
     * @brief Access exception from Exception
     */
    class AccessException : public Exception {
      public:
        AccessException(const Dict& dict, const std::string& message);
        virtual ~AccessException() throw();
        const Dict& dict() const throw();

      protected:
        const Dict& _dict;
    };

    /**
     * @brief Child exception from AccessException
     */
    class ChildException : public AccessException {
      public:
        ChildException(const Dict& dict, unsigned long index);
        ChildException(const Dict& dict, const std::string& child);
        virtual ~ChildException() throw();
        const std::string& key() const throw();
        const unsigned long& index() const throw();

      protected:
        unsigned long _index;
        std::string _key;
    };

    /**
     * @brief Get the Str From EType
     *
     * @param type
     * @return const char*
     */
    static const char* typeToStr(const EType& type);

    /**
     * @brief override operator stream for print value
     *
     * @param os
     * @param dict
     * @return std::ostream&
     */
    friend std::ostream& operator<<(std::ostream& os, const Dict& dict);

    /**
     * @brief Construct the Dict object
     */
    Dict();

    /**
     * @brief Construct a new Dict object
     *
     * @param rhs
     */
    Dict(const Dict& rhs);

    /**
     * @brief Construct a new Dict object
     *
     * @param value
     */
    Dict(const boolean_t& value);

    /**
     * @brief Construct a new Dict object
     *
     * @param value
     */
    Dict(const std::string& value);

    /**
     * @brief Construct a new Dict object
     *
     * @param value
     */
    Dict(const char* value);

    /**
     * @brief Construct a new Dict object
     *
     * @tparam Size
     */
    template<std::size_t Size>
    inline Dict(const char (&value)[Size]) :
        _type(STRING_TYPE) {
        _value.string = new string_t(value);
    }

    /**
     * @brief Construct a new Dict object
     *
     * @tparam T
     * @param value
     */
    template<typename T>
    inline Dict(const std::deque<T>& value) :
        _type(ARRAY_TYPE) {
        _value.array = new array_t();
        typename std::deque<T>::const_iterator it;
        for (it = value.begin(); it != value.end(); ++it) {
            _value.array->push_back(*it);
        }
    }

    /**
     * @brief Construct a new Dict object
     *
     * @tparam T
     * @param value
     */
    template<typename T>
    inline Dict(const std::list<T>& value) :
        _type(ARRAY_TYPE) {
        _value.array = new array_t();
        typename std::list<T>::const_iterator it;
        for (it = value.begin(); it != value.end(); ++it) {
            _value.array->push_back(*it);
        }
    }

    /**
     * @brief Construct a new Dict object
     *
     * @tparam T
     * @tparam U
     * @param value
     */
    template<typename T, typename U>
    inline Dict(const std::map<T, U>& value) :
        _type(ARRAY_TYPE) {
        _value.array = new array_t();
        typename std::map<T, U>::const_iterator it;
        for (it = value.begin(); it != value.end(); ++it) {
            if (static_cast<std::size_t>(it->first) < _value.array->size()) {
                (*_value.array)[static_cast<std::size_t>(it->first)] = it->second;
                continue;
            }
            while (_value.array->size() < static_cast<std::size_t>(it->first)) {
                _value.array->push_back(Dict());
            }
            _value.array->push_back(it->second);
        }
    }

    /**
     * @brief Construct a new Dict object
     *
     * @tparam T
     * @param value
     */
    template<typename T>
    inline Dict(const std::queue<T>& value) :
        _type(ARRAY_TYPE) {
        newArray();
        std::queue<T> copy = value;
        while (!copy.empty()) {
            _value.array->push_back(copy.front());
            copy.pop();
        }
    }

    /**
     * @brief Construct a new Dict object
     *
     * @tparam T
     * @param value
     */
    template<typename T>
    inline Dict(const std::set<T>& value) :
        _type(ARRAY_TYPE) {
        newArray();
        typename std::set<T>::const_iterator it;
        for (it = value.begin(); it != value.end(); ++it) {
            _value.array->push_back(*it);
        }
    }

    /**
     * @brief Construct a new Dict object
     *
     * @tparam T
     * @param value
     */
    template<typename T>
    inline Dict(const std::stack<T>& value) :
        _type(ARRAY_TYPE) {
        newArray();
        std::stack<T> copy = value;
        while (!copy.empty()) {
            _value.array->push_back(copy.top());
            copy.pop();
        }
    }

    /**
     * @brief Construct a new Dict object
     *
     * @tparam T
     * @param value
     */
    template<typename T>
    inline Dict(const std::vector<T>& value) :
        _type(ARRAY_TYPE) {
        newArray();
        typename std::vector<T>::const_iterator it;
        for (it = value.begin(); it != value.end(); ++it) {
            _value.array->push_back(*it);
        }
    }

    /**
     * @brief Construct a new Dict object
     *
     * @tparam T
     * @param value
     */
    template<typename T>
    inline Dict(const std::map<std::string, T>& value) :
        _type(OBJECT_TYPE) {
        _value.object = new object_t();
        typename std::map<std::string, T>::const_iterator it;
        for (it = value.begin(); it != value.end(); ++it) {
            _value.object->insert(std::pair<std::string, Dict>(it->first, it->second));
        }
    }

    /**
     * @brief Construct a new Dict object
     *
     * @tparam T
     * @param value
     */
    template<typename T>
    inline Dict(const T& value) :
        _type(NUMBER_TYPE) {
        _value.number = value;
    }

    /**
     * @brief Destroy the Dict object
     */
    ~Dict();

    /**
     * @brief copy dict
     *
     * @param dict
     */
    Dict& operator=(const Dict& dict);

    /**
     * @brief Get the Type object
     *
     * @return const EType&
     */
    const EType& getType() const;

    /**
     * @brief Swap object
     *
     * @param dict
     */
    void swap(Dict& dict);

    /**
     * @brief clear dict and set type as null
     */
    void clear();

    // -------------------------------------------------------------------------
    // NULL
    // -------------------------------------------------------------------------

    /**
     * @brief check if type of jsonator is null
     *
     * @return true if type is null else false
     */
    bool isNull() const;

    /**
     * @brief create null
     * @throw AccessException if type is not a null
     */
    void newNull() const;

    // -------------------------------------------------------------------------
    // BOOLEAN
    // -------------------------------------------------------------------------

    /**
     * @brief check if type of jsonator is a boolean
     *
     * @return true if type is a boolean else false
     */
    bool isBoolean() const;

    /**
     * @brief get the boolean of dict object
     *
     * @return const boolean_t&
     * @throw AccessException if dict type is not a boolean
     */
    const boolean_t& getBoolean() const;

    /**
     * @brief get the boolean of dict object
     *
     * @return boolean_t&
     */
    boolean_t& unsafeGetBoolean();

    /**
     * @brief get the boolean of dict object
     *
     * @return const boolean_t&
     */
    const boolean_t& unsafeGetBoolean() const;

    /**
     * @brief set value from bool
     *
     * @param value : new value
     * @throw AccessException if type is not none or not a boolean
     */
    Dict& operator=(const boolean_t& value);

    /**
     * @brief bool construct
     *
     * @return const boolean_t&
     * @throw AccessException if dict type is not a boolean
     */
    operator const boolean_t&() const;

    /**
     * @brief create bool from @p value
     *
     * @tparam T type of value
     * @param value
     * @throw AccessException if type is not a null and not a boolean
     */
    template<typename T>
    inline void newBoolean(const T& value) {
        if (!isNull() && !isBoolean()) {
            throw AccessException(*this, "is not a boolean");
        }
        _type = BOOLEAN_TYPE;
        _value.boolean = value;
    }

    // -------------------------------------------------------------------------
    // NUMBER
    // -------------------------------------------------------------------------

    /**
     * @brief check if type of jsonator is a number
     *
     * @return true if type is a number else false
     */
    bool isNumber() const;

    /**
     * @brief get the number of dict object
     *
     * @return const number_t&
     * @throw AccessException if dict type is not a number
     */
    const number_t& getNumber() const;

    /**
     * @brief get the number of dict object
     *
     * @return number_t&
     */
    number_t& unsafeGetNumber();

    /**
     * @brief get the number of dict object
     *
     * @return const number_t&
     */
    const number_t& unsafeGetNumber() const;

    /**
     * @brief set value from number
     *
     * @tparam T
     * @param value
     * @throw AccessException if type is not none or not a number
     */
    template<typename T>
    inline Dict& operator=(const T& value) {
        newNumber(value);
        return *this;
    }

    /**
     * @brief get number to T
     *
     * @tparam T
     * @throw AccessException if dict type is not a number
     */
    template<typename T>
    inline operator T() const {
        return getNumber();
    }

    /**
     * @brief create number from @p value
     *
     * @tparam T type of value
     * @param value
     * @throw AccessException if type is not a null and not a number
     */
    template<typename T>
    inline void newNumber(const T& value) {
        if (!isNull() && !isNumber()) {
            throw AccessException(*this, "is not a number");
        }
        _value.number = value;
        _type = NUMBER_TYPE;
    }

    // -------------------------------------------------------------------------
    // STRING
    // -------------------------------------------------------------------------

    /**
     * @brief check if type of jsonator is a string
     *
     * @return true if type is a string else false
     */
    bool isString() const;

    /**
     * @brief get the string of dict object
     *
     * @return const string_t&
     * @throw AccessException if dict type is not a string
     */
    const string_t& getString() const;

    /**
     * @brief get the string of dict object
     *
     * @return string_t&
     */
    string_t& unsafeGetString();

    /**
     * @brief get the string of dict object
     *
     * @return const string_t&
     */
    const string_t& unsafeGetString() const;

    /**
     * @brief set value from str
     *
     * @param value : new value
     * @throw AccessException if type is not none or not a string
     */
    Dict& operator=(const std::string& value);

    /**
     * @brief set value from str
     *
     * @param value : new value
     * @throw AccessException if type is not none or not a string
     */
    Dict& operator=(const char* value);

    /**
     * @brief set value from str
     *
     * @param value : new value
     * @throw AccessException if type is not none or not a string
     */
    template<std::size_t Size>
    inline Dict& operator=(const char (&value)[Size]) {
        newString(std::string(value));
        return *this;
    }

    /**
     * @brief string construct
     *
     * @return const string_t&
     * @throw AccessException if dict type is not a string
     */
    operator const string_t&() const;

    /**
     * @brief string construct
     *
     * @return const char*
     * @throw AccessException if dict type is not a string
     */
    operator const char*() const;

    /**
     * @brief create string from @p value
     *
     * @param value
     * @throw AccessException if type is not a null and not a string
     */
    void newString(const std::string& value);

    /**
     * @brief create string from @p value
     *
     * @tparam T type of value
     * @param value
     * @throw AccessException if type is not a null and not a string
     */
    template<typename T>
    inline void newString(const T& value) {
        if (!isNull() && !isString()) {
            throw AccessException(*this, "is not a string");
        }
        std::ostringstream oss("");
        oss << value;
        if (isNull()) {
            _value.string = new string_t(oss.str());
            _type = STRING_TYPE;
        }
        else {
            *(_value.string) = oss.str();
        }
    }

    // -------------------------------------------------------------------------
    // ARRAY
    // -------------------------------------------------------------------------

    /**
     * @brief check if type of jsonator is a array
     *
     * @return true if type is a array else false
     */
    bool isArray() const;

    /**
     * @brief get the array of dict object
     *
     * @return const array_t&
     * @throw AccessException if dict type is not a array
     */
    const array_t& getArray() const;

    /**
     * @brief get the array of dict object
     *
     * @return array_t&
     */
    array_t& unsafeGetArray();

    /**
     * @brief get the array of dict object
     *
     * @return const array_t&
     */
    const array_t& unsafeGetArray() const;

    /**
     * @brief set value from deque
     *
     * @tparam T
     * @param value
     * @throw AccessException if type is not none or not a array
     */
    template<typename T>
    inline Dict& operator=(const std::deque<T>& value) {
        newArray();
        typename std::deque<T>::const_iterator it;
        for (it = value.begin(); it != value.end(); ++it) {
            _value.array->push_back(*it);
        }
        return *this;
    }

    /**
     * @brief set value from list
     *
     * @tparam T
     * @param value
     * @throw AccessException if type is not none or not a array
     */
    template<typename T>
    inline Dict& operator=(const std::list<T>& value) {
        newArray();
        typename std::list<T>::const_iterator it;
        for (it = value.begin(); it != value.end(); ++it) {
            _value.array->push_back(*it);
        }
        return *this;
    }

    /**
     * @brief set value from map
     *
     * @tparam T key
     * @tparam U value
     * @param value
     * @throw AccessException if type is not none or not a array or not a object
     */
    template<typename T, typename U>
    inline Dict& operator=(const std::map<T, U>& value) {
        newArray();
        typename std::map<T, U>::const_iterator it;
        for (it = value.begin(); it != value.end(); ++it) {
            operator[](it->first) = it->second;
        }
        return *this;
    }

    /**
     * @brief set value from queue
     *
     * @tparam T
     * @param value
     * @throw AccessException if type is not none or not a array
     */
    template<typename T>
    inline Dict& operator=(const std::queue<T>& value) {
        newArray();
        std::queue<T> copy = value;
        while (!copy.empty()) {
            _value.array->push_back(copy.front());
            copy.pop();
        }
        return *this;
    }

    /**
     * @brief set value from set
     *
     * @tparam T
     * @param value
     * @throw AccessException if type is not none or not a array
     */
    template<typename T>
    inline Dict& operator=(const std::set<T>& value) {
        newArray();
        typename std::set<T>::const_iterator it;
        for (it = value.begin(); it != value.end(); ++it) {
            _value.array->push_back(*it);
        }
        return *this;
    }

    /**
     * @brief set value from stack
     *
     * @tparam T
     * @param value
     * @throw AccessException if type is not none or not a array
     */
    template<typename T>
    inline Dict& operator=(const std::stack<T>& value) {
        newArray();
        std::stack<T> copy = value;
        while (!copy.empty()) {
            _value.array->push_back(copy.top());
            copy.pop();
        }
        return *this;
    }

    /**
     * @brief set value from vector
     *
     * @tparam T
     * @param value
     * @throw AccessException if type is not none or not a array
     */
    template<typename T>
    inline Dict& operator=(const std::vector<T>& value) {
        newArray();
        typename std::vector<T>::const_iterator it;
        for (it = value.begin(); it != value.end(); ++it) {
            _value.array->push_back(*it);
        }
        return *this;
    }

    /**
     * @brief create array
     *
     * @throw AccessException if type is not a null and not a array
     */
    void newArray();

    /**
     * @brief get dict from @p index if the lowers indexies not exists create of null object
     *
     * @param index
     * @return Dict& data associated with the index or if the index does not exist,
     * a dict object with that index is created using default values, which is then returned
     * @throw AccessException if type is not a null and not a array
     */
    template<typename T>
    inline Dict& operator[](const T& index) {
        newArray();
        if (static_cast<std::size_t>(index) < _value.array->size()) {
            return (*_value.array)[static_cast<std::size_t>(index)];
        }
        while (_value.array->size() < static_cast<std::size_t>(index)) {
            _value.array->push_back(Dict());
        }
        _value.array->push_back(Dict());
        return _value.array->back();
    }

    /**
     * @brief get const dict from @p index
     *
     * @param index
     * @return const Dict&
     * @throw AccessException if type is not a array
     * @throw ChildException if index is not exists
     */
    template<typename T>
    inline const Dict& operator[](const T& index) const {
        if (!isArray()) {
            throw AccessException(*this, "is not a array");
        }
        if (static_cast<std::size_t>(index) < _value.array->size()) {
            return (*_value.array)[static_cast<std::size_t>(index)];
        }
        throw ChildException(*this, static_cast<unsigned long>(index));
    }

    /**
     * @brief check if array contains a @p index
     *
     * @param index
     * @return true if array has index else false
     * @throw AccessException if type is not a array
     */
    template<typename T>
    inline bool contains(const T& index) const {
        if (!isArray()) {
            throw AccessException(*this, "is not a array");
        }
        return static_cast<std::size_t>(index) < _value.array->size();
    }

    // -------------------------------------------------------------------------
    // OBJECT
    // -------------------------------------------------------------------------

    /**
     * @brief check if type of jsonator is a object
     *
     * @return true if type is a object else false
     */
    bool isObject() const;

    /**
     * @brief get the object of dict object
     *
     * @return const object_t&
     * @throw AccessException if dict type is not a object
     */
    const object_t& getObject() const;

    /**
     * @brief get the object of dict object
     *
     * @return object_t&
     */
    object_t& unsafeGetObject();

    /**
     * @brief get the object of dict object
     *
     * @return const object_t&
     */
    const object_t& unsafeGetObject() const;

    /**
     * @brief set value from map
     *
     * @tparam T key
     * @tparam U value
     * @param value
     * @throw AccessException if type is not none or not a object
     */
    template<typename T>
    inline Dict& operator=(const std::map<std::string, T>& value) {
        newObject();
        typename std::map<std::string, T>::const_iterator it;
        for (it = value.begin(); it != value.end(); ++it) {
            _value.object->insert(std::pair<std::string, Dict>(it->first, it->second));
        }
        return *this;
    }

    /**
     * @brief create object
     * @throw AccessException if type is not a null and not a object
     */
    void newObject();

    /**
     * @brief get dict from @p key
     *
     * @param key
     * @return Dict& data associated with the key or if the key does not exist,
     * a dict object with that key is created using default values, which is then returned
     * @throw AccessException if type is not a null and not a object
     */
    Dict& operator[](const std::string& key);

    /**
     * @brief get const dict from @p key
     *
     * @param key
     * @return const Dict&
     * @throw AccessException if type is not a object
     * @throw ChildException if key is not exists
     */
    const Dict& operator[](const std::string& key) const;

    /**
     * @brief get dict from @p key
     *
     * @param key
     * @return Dict& data associated with the key or if the key does not exist,
     * a dict object with that key is created using default values, which is then returned
     * @throw AccessException if type is not a null and not a object
     */
    Dict& operator[](const char* key);

    /**
     * @brief get const dict from @p key
     *
     * @param key
     * @return const Dict&
     * @throw AccessException if type is not a object
     * @throw ChildException if key is not exists
     */
    const Dict& operator[](const char* key) const;

    /**
     * @brief get dict from @p key
     *
     * @param key
     * @return Dict& data associated with the key or if the key does not exist,
     * a dict object with that key is created using default values, which is then returned
     * @throw AccessException if type is not a null and not a object
     */
    template<std::size_t Size>
    inline Dict& operator[](const char (&key)[Size]) {
        return operator[](std::string(key));
    }

    /**
     * @brief get const dict from @p key
     *
     * @param key
     * @return const Dict&
     * @throw AccessException if type is not a object
     * @throw ChildException if key is not exists
     */
    template<std::size_t Size>
    inline const Dict& operator[](const char (&key)[Size]) const {
        return operator[](std::string(key));
    }

    /**
     * @brief check if object contains a @p key
     *
     * @param key
     * @return true if object has key else false
     * @throw AccessException if type is not a object
     */
    bool contains(const std::string& key) const;

    /**
     * @brief check if object contains a @p key
     *
     * @param key
     * @return true if object has key else false
     * @throw AccessException if type is not a object
     */
    bool contains(const char* key) const;

    /**
     * @brief check if object contains a @p key
     *
     * @param key
     * @return true if object has key else false
     * @throw AccessException if type is not a object
     */
    template<std::size_t Size>
    inline bool contains(const char (&key)[Size]) const {
        return contains(std::string(key));
    }

    /**
     * @brief get the @c T of dict object
     *
     * @tparam T
     * @return T
     */
    template<typename T>
    inline T get() const {
        return *this;
    }

    /**
     * @brief get the @p T of dict object
     *
     * @tparam T
     * @param ret
     */
    template<typename T>
    inline void get(T& ret) const {
        ret = get<T>();
    }

    /**
     * @brief get dict to deque
     *
     * @tparam T
     */
    template<typename T>
    inline operator std::deque<T>() const {
        std::deque<T> ret;
        switch (_type) {
            case ARRAY_TYPE: {
                for (std::size_t i = 0; i < _value.array->size(); ++i) {
                    ret.push_back((*_value.array)[i]);
                }
                break;
            }
            case OBJECT_TYPE: {
                for (object_t::const_iterator it = _value.object->begin(); it != _value.object->end(); ++it) {
                    ret.push_back(it->second);
                }
                break;
            }
            default:
                break;
        }
        return ret;
    }

    /**
     * @brief get dict to list
     *
     * @tparam T
     */
    template<typename T>
    inline operator std::list<T>() const {
        std::list<T> ret;
        switch (_type) {
            case ARRAY_TYPE:
                for (std::size_t i = 0; i < _value.array->size(); ++i) {
                    ret.push_back((*_value.array)[i]);
                }
                break;
            case OBJECT_TYPE:
                for (object_t::const_iterator it = _value.object->begin(); it != _value.object->end(); ++it) {
                    ret.push_back(it->second);
                }
                break;
            default:
                break;
        }
        return ret;
    }

    /**
     * @brief get dict to map
     *
     * @tparam T
     * @return std::map<std::string, T>
     */
    template<typename T>
    inline operator std::map<std::string, T>() const {
        std::map<std::string, T> ret;
        if (isObject()) {
            for (object_t::const_iterator it = _value.object->begin(); it != _value.object->end(); ++it) {
                ret.insert(std::pair<std::string, T>(it->first, it->second));
            }
        }
        return ret;
    }

    /**
     * @brief get dict to map
     *
     * @tparam T key
     * @tparam U value
     */
    template<typename T, typename U>
    inline operator std::map<T, U>() const {
        std::map<T, U> ret;
        if (isArray()) {
            for (std::size_t i = 0; i < _value.array->size(); ++i) {
                ret.insert(std::pair<T, U>(i, (*_value.array)[i]));
            }
        }
        return ret;
    }

    /**
     * @brief get dict to queue
     *
     * @tparam T
     */
    template<typename T>
    inline operator std::queue<T>() const {
        std::queue<T> ret;
        switch (_type) {
            case ARRAY_TYPE:
                for (std::size_t i = 0; i < _value.array->size(); ++i) {
                    ret.push((*_value.array)[i]);
                }
                break;
            case OBJECT_TYPE:
                for (object_t::const_iterator it = _value.object->begin(); it != _value.object->end(); ++it) {
                    ret.push(it->second);
                }
                break;
            default:
                break;
        }
        return ret;
    }

    /**
     * @brief get dict to set
     *
     * @tparam T
     */
    template<typename T>
    inline operator std::set<T>() const {
        std::set<T> ret;
        switch (_type) {
            case ARRAY_TYPE:
                for (std::size_t i = 0; i < _value.array->size(); ++i) {
                    ret.insert((*_value.array)[i]);
                }
                break;
            case OBJECT_TYPE:
                for (object_t::const_iterator it = _value.object->begin(); it != _value.object->end(); ++it) {
                    ret.insert(it->second);
                }
                break;
            default:
                break;
        }
        return ret;
    }

    /**
     * @brief get dict to stack
     *
     * @tparam T
     */
    template<typename T>
    inline operator std::stack<T>() const {
        std::stack<T> ret;
        switch (_type) {
            case ARRAY_TYPE:
                for (std::size_t i = 0; i < _value.array->size(); ++i) {
                    ret.insert((*_value.array)[i]);
                }
                break;
            case OBJECT_TYPE:
                for (object_t::const_iterator it = _value.object->begin(); it != _value.object->end(); ++it) {
                    ret.insert(it->second);
                }
                break;
            default:
                break;
        }
        return ret;
    }

    /**
     * @brief get dict to vector
     *
     * @tparam T
     */
    template<typename T>
    inline operator std::vector<T>() const {
        std::vector<T> ret;
        switch (_type) {
            case ARRAY_TYPE:
                for (std::size_t i = 0; i < _value.array->size(); ++i) {
                    ret.push_back((*_value.array)[i]);
                }
                break;
            case OBJECT_TYPE:
                for (object_t::const_iterator it = _value.object->begin(); it != _value.object->end(); ++it) {
                    ret.push_back(it->second);
                }
                break;
            default:
                break;
        }
        return ret;
    }
};

} // namespace blet

#endif // _BLET_DICT_H_

// Copy from src/array.cpp

// #include "blet/dict.h"

namespace blet {

inline bool Dict::isArray() const {
    return _type == ARRAY_TYPE;
}

inline const Dict::array_t& Dict::getArray() const {
    if (!isArray()) {
        throw AccessException(*this, "is not a array");
    }
    return *_value.array;
}

inline Dict::array_t& Dict::unsafeGetArray() {
    return *_value.array;
}

inline const Dict::array_t& Dict::unsafeGetArray() const {
    return *_value.array;
}

inline void Dict::newArray() {
    if (!isNull() && !isArray()) {
        throw AccessException(*this, "is not a array");
    }
    if (isNull()) {
        _value.array = new array_t();
        _type = ARRAY_TYPE;
    }
}

} // namespace blet

// Copy from src/boolean.cpp

// #include "blet/dict.h"

namespace blet {

inline bool Dict::isBoolean() const {
    return _type == BOOLEAN_TYPE;
}

inline const Dict::boolean_t& Dict::getBoolean() const {
    if (!isBoolean()) {
        throw AccessException(*this, "is not a boolean");
    }
    return _value.boolean;
}

inline Dict::boolean_t& Dict::unsafeGetBoolean() {
    return _value.boolean;
}

inline const Dict::boolean_t& Dict::unsafeGetBoolean() const {
    return _value.boolean;
}

inline Dict& Dict::operator=(const boolean_t& value) {
    newBoolean<boolean_t>(value);
    return *this;
}

inline Dict::operator const boolean_t&() const {
    return getBoolean();
}

} // namespace blet

// Copy from src/container.cpp

// #include "blet/dict.h"

namespace blet {

/*  map             vector          string
    count           assign          append
    equal_range     capacity        assign
    get_allocator   data & c        c_str
    key_comp        max_size        begin
    lower_bound & c reserve         capacity
    upper_bound & c resize          cbegin
    value_comp      back            compare
                                    copy
                                    end
                                    erase
                                    find_first_not_of
                                    find_first_of
                                    find_last_not_of
                                    find_last_of
                                    find
                                    rfind
                                    get_allocator
                                    insert
                                    length
                                    max_size
                                    push_back
                                    replace
                                    reserve
                                    substr
                                    data



*/

} // namespace blet

// Copy from src/dict.cpp

// #include "blet/dict.h"

namespace blet {

inline const char* Dict::typeToStr(const EType& type) {
    const char* ret = NULL;
    switch (type) {
        case NULL_TYPE:
            ret = "null";
            break;
        case BOOLEAN_TYPE:
            ret = "boolean";
            break;
        case NUMBER_TYPE:
            ret = "number";
            break;
        case STRING_TYPE:
            ret = "string";
            break;
        case ARRAY_TYPE:
            ret = "array";
            break;
        case OBJECT_TYPE:
            ret = "object";
            break;
    }
    return ret;
}

inline std::ostream& operator<<(std::ostream& os, const Dict& dict) {
    switch (dict._type) {
        case Dict::NULL_TYPE:
            os << "null";
            break;
        case Dict::BOOLEAN_TYPE:
            os << dict._value.boolean;
            break;
        case Dict::NUMBER_TYPE:
            os << dict._value.number;
            break;
        case Dict::STRING_TYPE:
            os << *(dict._value.string);
            break;
        case Dict::ARRAY_TYPE:
            os << "<array " << &dict << ">";
            break;
        case Dict::OBJECT_TYPE:
            os << "<object " << &dict << ">";
            break;
    }
    return os;
}

inline Dict::Dict() :
    _type(NULL_TYPE) {}

inline Dict::Dict(const boolean_t& value) :
    _type(BOOLEAN_TYPE) {
    _value.boolean = value;
}

inline Dict::Dict(const std::string& value) :
    _type(STRING_TYPE) {
    _value.string = new string_t(value);
}

inline Dict::Dict(const char* value) :
    _type(STRING_TYPE) {
    _value.string = new string_t(value);
}

inline Dict::Dict(const Dict& rhs) :
    _type(rhs._type) {
    switch (_type) {
        case NULL_TYPE:
            break;
        case BOOLEAN_TYPE:
            _value.boolean = rhs._value.boolean;
            break;
        case NUMBER_TYPE:
            _value.number = rhs._value.number;
            break;
        case STRING_TYPE:
            _value.string = new string_t(*(rhs._value.string));
            break;
        case ARRAY_TYPE:
            _value.array = new array_t(*(rhs._value.array));
            break;
        case OBJECT_TYPE:
            _value.object = new object_t(*(rhs._value.object));
            break;
    }
}

inline Dict::~Dict() {
    switch (_type) {
        case NULL_TYPE:
        case BOOLEAN_TYPE:
        case NUMBER_TYPE:
            break;
        case STRING_TYPE:
            delete _value.string;
            break;
        case ARRAY_TYPE:
            delete _value.array;
            break;
        case OBJECT_TYPE:
            delete _value.object;
            break;
    }
}

inline Dict& Dict::operator=(const Dict& dict) {
    if (&dict == this) {
        return *this;
    }
    if (!isNull()) {
        throw AccessException(*this, "is not null");
    }
    switch (dict._type) {
        case NULL_TYPE:
            break;
        case BOOLEAN_TYPE:
            _value.boolean = dict._value.boolean;
            break;
        case NUMBER_TYPE:
            _value.number = dict._value.number;
            break;
        case STRING_TYPE:
            _value.string = new string_t(*(dict._value.string));
            break;
        case ARRAY_TYPE:
            _value.array = new array_t(*(dict._value.array));
            break;
        case OBJECT_TYPE:
            _value.object = new object_t(*(dict._value.object));
            break;
    }
    _type = dict._type;
    return *this;
}

inline const Dict::EType& Dict::getType() const {
    return _type;
}

inline void Dict::swap(Dict& dict) {
    EType typeTmp = _type;
    UValue valueTmp = _value;
    _type = dict._type;
    _value = dict._value;
    dict._type = typeTmp;
    dict._value = valueTmp;
}

inline void Dict::clear() {
    switch (_type) {
        case NULL_TYPE:
        case BOOLEAN_TYPE:
        case NUMBER_TYPE:
            break;
        case STRING_TYPE:
            delete _value.string;
            break;
        case ARRAY_TYPE:
            delete _value.array;
            break;
        case OBJECT_TYPE:
            delete _value.object;
            break;
    }
    _type = NULL_TYPE;
}

} // namespace blet

// Copy from src/exception.cpp

// #include "blet/dict.h"

namespace blet {

inline Dict::Exception::Exception(const std::string& message) :
    std::exception(),
    _message(message) {}

inline Dict::Exception::~Exception() throw() {}

inline const char* Dict::Exception::what() const throw() {
    return _message.c_str();
}

inline Dict::AccessException::AccessException(const Dict& dict, const std::string& message) :
    Exception(message + " (is " + Dict::typeToStr(dict._type) + ")."),
    _dict(dict) {}

inline Dict::AccessException::~AccessException() throw() {}

inline const Dict& Dict::AccessException::dict() const throw() {
    return _dict;
}

inline Dict::ChildException::ChildException(const Dict& dict, unsigned long index) :
    AccessException(dict, ""),
    _index(index),
    _key() {
    std::ostringstream oss("");
    oss << index << " has out of range.";
    _message = oss.str();
}

inline Dict::ChildException::ChildException(const Dict& dict, const std::string& key) :
    AccessException(dict, ""),
    _index(0),
    _key(key) {
    std::ostringstream oss("");
    oss << key << " has not a key.";
    _message = oss.str();
}

inline Dict::ChildException::~ChildException() throw() {}

inline const std::string& Dict::ChildException::key() const throw() {
    return _key;
}

inline const unsigned long& Dict::ChildException::index() const throw() {
    return _index;
}

} // namespace blet

// Copy from src/null.cpp

// #include "blet/dict.h"

namespace blet {

inline bool Dict::isNull() const {
    return _type == NULL_TYPE;
}

inline void Dict::newNull() const {
    if (!isNull()) {
        throw AccessException(*this, "is not a null");
    }
}

} // namespace blet

// Copy from src/number.cpp

// #include "blet/dict.h"

namespace blet {

inline bool Dict::isNumber() const {
    return _type == NUMBER_TYPE;
}

inline const Dict::number_t& Dict::getNumber() const {
    if (!isNumber()) {
        throw AccessException(*this, "is not a number");
    }
    return _value.number;
}

inline Dict::number_t& Dict::unsafeGetNumber() {
    return _value.number;
}

inline const Dict::number_t& Dict::unsafeGetNumber() const {
    return _value.number;
}

} // namespace blet

// Copy from src/object.cpp

// #include "blet/dict.h"

namespace blet {

inline bool Dict::isObject() const {
    return _type == OBJECT_TYPE;
}

inline const Dict::object_t& Dict::getObject() const {
    if (!isObject()) {
        throw AccessException(*this, "is not a object");
    }
    return *_value.object;
}

inline Dict::object_t& Dict::unsafeGetObject() {
    return *_value.object;
}

inline const Dict::object_t& Dict::unsafeGetObject() const {
    return *_value.object;
}

inline void Dict::newObject() {
    if (!isNull() && !isObject()) {
        throw AccessException(*this, "is not a object");
    }
    if (isNull()) {
        _value.object = new object_t();
        _type = OBJECT_TYPE;
    }
}

inline Dict& Dict::operator[](const std::string& key) {
    if (isNull()) {
        newObject();
    }
    object_t::iterator it = _value.object->find(key);
    if (it != _value.object->end()) {
        return it->second;
    }
    return _value.object->insert(std::pair<std::string, Dict>(key, Dict())).first->second;
}

inline const Dict& Dict::operator[](const std::string& key) const {
    if (!isObject()) {
        throw AccessException(*this, "is not a object");
    }
    object_t::const_iterator it = _value.object->find(key);
    if (it != _value.object->end()) {
        return it->second;
    }
    throw ChildException(*this, key);
}

inline Dict& Dict::operator[](const char* key) {
    return operator[](std::string(key));
}

inline const Dict& Dict::operator[](const char* key) const {
    return operator[](std::string(key));
}

inline bool Dict::contains(const std::string& key) const {
    if (!isObject()) {
        throw AccessException(*this, "is not a object");
    }
    return _value.object->find(key) != _value.object->end();
}

inline bool Dict::contains(const char* key) const {
    return contains(std::string(key));
}

} // namespace blet

// Copy from src/string.cpp

// #include "blet/dict.h"

namespace blet {

inline bool Dict::isString() const {
    return _type == STRING_TYPE;
}

inline const Dict::string_t& Dict::getString() const {
    if (!isString()) {
        throw AccessException(*this, "is not a string");
    }
    return *_value.string;
}

inline Dict::string_t& Dict::unsafeGetString() {
    return *_value.string;
}

inline const Dict::string_t& Dict::unsafeGetString() const {
    return *_value.string;
}

inline Dict& Dict::operator=(const std::string& value) {
    newString<std::string>(value);
    return *this;
}

inline Dict& Dict::operator=(const char* value) {
    newString<std::string>(value);
    return *this;
}

inline Dict::operator const string_t&() const {
    return getString();
}

inline Dict::operator const char*() const {
    return getString().c_str();
}

inline void Dict::newString(const std::string& value) {
    if (!isNull() && !isString()) {
        throw AccessException(*this, "is not a string");
    }
    if (isNull()) {
        _value.string = new string_t(value);
        _type = STRING_TYPE;
    }
    else {
        *(_value.string) = value;
    }
}

} // namespace blet

#endif // #ifndef _AMALGAMATE_GUARD__SINGLE_INCLUDE_BLET_DICT_H_

namespace blet {

namespace json {

/**
 * @brief Parse exception from std::exception
 */
class ParseException : public std::exception {
  public:
    ParseException(const std::string& filename, const std::string& message);
    ParseException(const std::string& filename, std::size_t line, std::size_t column, const std::string& message);
    virtual ~ParseException() throw();
    const char* what() const throw();
    const std::string& filename() const throw();
    const std::string& message() const throw();
    const std::size_t& line() const throw();
    const std::size_t& column() const throw();

  protected:
    std::string _what;
    std::string _filename;
    std::string _message;
    std::size_t _line;
    std::size_t _column;
};

/**
 * @brief dump dict in json format
 *
 * @param dict object for dump
 * @param os output ostream
 * @param indent indentation of dump
 * @param indentCharacter indentation character
 */
void dump(const blet::Dict& dict, std::ostream& os, std::size_t indent = 0, char indentCharacter = ' ');

/**
 * @brief dump dict in json format
 *
 * @param dict object for dump
 * @param indent indentation of dump
 * @param indentCharacter indentation character
 * @return std::string
 */
std::string dump(const blet::Dict& dict, std::size_t indent = 0, char indentCharacter = ' ');

blet::Dict parseFile(const char* filename, bool comment = true, bool additionalNext = true);

blet::Dict parseStream(std::istream& stream, bool comment = true, bool additionalNext = true);

blet::Dict parseString(const std::string& str, bool comment = true, bool additionalNext = true);

blet::Dict parseData(const void* data, std::size_t size, bool comment = true, bool additionalNext = true);

} // namespace json

} // namespace blet

#endif // #ifndef _BLET_JSON_H_

// Copy from src/exception.cpp

/**
 * exception.cpp
 *
 * Licensed under the MIT License <http://opensource.org/licenses/MIT>.
 * Copyright (c) 2023 BLET MickaÃ«l.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// #include "blet/json.h"

namespace blet {

namespace json {

inline ParseException::ParseException(const std::string& filename, const std::string& message) :
    std::exception(),
    _filename(filename),
    _message(message),
    _line(0),
    _column(0) {
    std::ostringstream oss("");
    oss << "Parse ";
    if (!_filename.empty()) {
        oss << _filename << ": ";
    }
    oss << '(' << _message << ").";
    _what = oss.str();
}

inline ParseException::ParseException(const std::string& filename, std::size_t line, std::size_t column,
                                      const std::string& message) :
    std::exception(),
    _filename(filename),
    _message(message),
    _line(line),
    _column(column) {
    std::ostringstream oss("");
    oss << "Parse at ";
    if (!_filename.empty()) {
        oss << _filename << ':';
    }
    oss << _line << ':' << _column << " (" << _message << ").";
    _what = oss.str();
}

inline ParseException::~ParseException() throw() {}

inline const char* ParseException::what() const throw() {
    return _what.c_str();
}

inline const std::string& ParseException::filename() const throw() {
    return _filename;
}

inline const std::string& ParseException::message() const throw() {
    return _message;
}

inline const std::size_t& ParseException::line() const throw() {
    return _line;
}

inline const std::size_t& ParseException::column() const throw() {
    return _column;
}

} // namespace json

} // namespace blet

// Copy from src/json.cpp

/**
 * json.cpp
 *
 * Licensed under the MIT License <http://opensource.org/licenses/MIT>.
 * Copyright (c) 2022-2023 BLET MickaÃ«l.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// #include "blet/json.h"

#include <ctype.h>  // ::isdigit, ::isspace
#include <stdlib.h> // ::strtod
#include <string.h> // ::strncmp

#include <fstream> // std::ifstream
#include <iomanip> // std::setprecision
#include <limits>  // std::numeric_limits

namespace blet {

namespace json {

static inline void s_stringEscape(std::ostream& oss, const std::string& str) {
    static const std::pair<char, std::string> pairChars[] = {
        std::pair<char, std::string>('\a', "\\a"),  // Alert (bell, alarm)
        std::pair<char, std::string>('\b', "\\b"),  // Backspace
        std::pair<char, std::string>('\f', "\\f"),  // Form feed (new page)
        std::pair<char, std::string>('\n', "\\n"),  // New-line
        std::pair<char, std::string>('\r', "\\r"),  // Carriage return
        std::pair<char, std::string>('\t', "\\t"),  // Horizontal tab
        std::pair<char, std::string>('\v', "\\v"),  // Vertical tab
        std::pair<char, std::string>('\'', "\\'"),  // Single quotation mark
        std::pair<char, std::string>('\"', "\\\""), // Double quotation mark
        std::pair<char, std::string>('\\', "\\\\")  // Backslash
    };
    static const std::map<char, std::string> escapeChar(pairChars, pairChars + sizeof(pairChars) / sizeof(*pairChars));

    for (std::size_t i = 0; i < str.size(); ++i) {
        std::map<char, std::string>::const_iterator cit = escapeChar.find(str[i]);
        if (cit != escapeChar.end()) {
            oss << cit->second;
        }
        else {
            oss << str[i];
        }
    }
}

static inline void s_newlineDump(std::ostream& oss, const blet::Dict& dict, std::size_t indent) {
    if (indent != 0) {
        switch (dict.getType()) {
            case blet::Dict::NULL_TYPE:
                break;
            case blet::Dict::OBJECT_TYPE:
                if (!dict.unsafeGetObject().empty()) {
                    oss << '\n';
                }
                break;
            case blet::Dict::ARRAY_TYPE:
                if (!dict.unsafeGetArray().empty()) {
                    oss << '\n';
                }
                break;
            case blet::Dict::STRING_TYPE:
                break;
            case blet::Dict::NUMBER_TYPE:
                break;
            case blet::Dict::BOOLEAN_TYPE:
                break;
        }
    }
}

static inline void s_indentDump(std::ostream& oss, const blet::Dict& dict, std::size_t indent, char indentCharacter,
                                std::size_t index) {
    if (indent != 0) {
        switch (dict.getType()) {
            case blet::Dict::NULL_TYPE:
                break;
            case blet::Dict::OBJECT_TYPE:
                oss << std::string(indent * index, indentCharacter);
                break;
            case blet::Dict::ARRAY_TYPE:
                oss << std::string(indent * index, indentCharacter);
                break;
            case blet::Dict::STRING_TYPE:
                break;
            case blet::Dict::NUMBER_TYPE:
                break;
            case blet::Dict::BOOLEAN_TYPE:
                break;
        }
    }
}

static inline void s_nullDump(std::ostream& oss, const blet::Dict& /*json*/, std::size_t /*indent*/,
                              char /*indentCharacter*/, std::size_t /*index*/) {
    oss << "null";
}

static inline void s_numberDump(std::ostream& oss, const blet::Dict& dict, std::size_t /*indent*/,
                                char /*indentCharacter*/, std::size_t /*index*/) {
    oss << dict.getNumber();
}

static inline void s_booleanDump(std::ostream& oss, const blet::Dict& dict, std::size_t /*indent*/,
                                 char /*indentCharacter*/, std::size_t /*index*/) {
    if (dict.getBoolean()) {
        oss << "true";
    }
    else {
        oss << "false";
    }
}

static inline void s_stringDump(std::ostream& oss, const blet::Dict& dict, std::size_t /*indent*/,
                                char /*indentCharacter*/, std::size_t /*index*/) {
    oss << '"';
    s_stringEscape(oss, dict.getString());
    oss << '"';
}

static void s_typeDump(std::ostream& oss, const blet::Dict& dict, std::size_t indent, char indentCharacter,
                       std::size_t index = 0);

static inline void s_objectDump(std::ostream& oss, const blet::Dict& dict, std::size_t indent, char indentCharacter,
                                std::size_t index) {
    oss << '{';
    s_newlineDump(oss, dict, indent);
    ++index;
    for (blet::Dict::object_t::const_iterator cit = dict.unsafeGetObject().begin(); cit != dict.unsafeGetObject().end();
         ++cit) {
        if (cit != dict.unsafeGetObject().begin()) {
            oss << ',';
            s_newlineDump(oss, dict, indent);
        }
        s_indentDump(oss, dict, indent, indentCharacter, index);
        oss << '"';
        s_stringEscape(oss, cit->first);
        oss << '"';
        oss << ':';
        if (indent != 0) {
            oss << ' ';
        }
        s_typeDump(oss, cit->second, indent, indentCharacter, index);
    }
    s_newlineDump(oss, dict, indent);
    --index;
    s_indentDump(oss, dict, indent, indentCharacter, index);
    oss << '}';
}

static inline void s_arrayDump(std::ostream& oss, const blet::Dict& dict, std::size_t indent, char indentCharacter,
                               std::size_t index) {
    oss << '[';
    s_newlineDump(oss, dict, indent);
    ++index;
    for (std::size_t i = 0; i < dict.unsafeGetArray().size(); ++i) {
        if (i != 0) {
            oss << ',';
            s_newlineDump(oss, dict, indent);
        }
        s_indentDump(oss, dict, indent, indentCharacter, index);
        s_typeDump(oss, dict.unsafeGetArray()[i], indent, indentCharacter, index);
    }
    s_newlineDump(oss, dict, indent);
    --index;
    s_indentDump(oss, dict, indent, indentCharacter, index);
    oss << ']';
}

inline void s_typeDump(std::ostream& oss, const blet::Dict& dict, std::size_t indent, char indentCharacter,
                       std::size_t index) {
    switch (dict.getType()) {
        case blet::Dict::NULL_TYPE:
            s_nullDump(oss, dict, indent, indentCharacter, index);
            break;
        case blet::Dict::OBJECT_TYPE:
            s_objectDump(oss, dict, indent, indentCharacter, index);
            break;
        case blet::Dict::ARRAY_TYPE:
            s_arrayDump(oss, dict, indent, indentCharacter, index);
            break;
        case blet::Dict::STRING_TYPE:
            s_stringDump(oss, dict, indent, indentCharacter, index);
            break;
        case blet::Dict::NUMBER_TYPE:
            s_numberDump(oss, dict, indent, indentCharacter, index);
            break;
        case blet::Dict::BOOLEAN_TYPE:
            s_booleanDump(oss, dict, indent, indentCharacter, index);
            break;
    }
}

inline void dump(const blet::Dict& dict, std::ostream& os, std::size_t indent, char indentCharacter) {
    os << std::setprecision(std::numeric_limits<double>::digits10 + 1);
    s_typeDump(os, dict, indent, indentCharacter);
}

inline std::string dump(const blet::Dict& dict, std::size_t indent, char indentCharacter) {
    std::ostringstream oss("");
    dump(dict, oss, indent, indentCharacter);
    return oss.str();
}

/**
 * @brief structure of info parser
 */
struct JsonParseInfo {
    inline JsonParseInfo(const std::string& filename_, bool additionnalNext_) :
        filename(filename_),
        additionalNext(additionnalNext_) {}
    inline ~JsonParseInfo() {}

    inline std::size_t line(std::size_t i) const {
        return indexToLine[i];
    }

    inline std::size_t column(std::size_t i) const {
        return i - lineToIndex[indexToLine[i] - 1] + 1;
    }

    inline std::size_t lastLine(std::size_t /*i*/) const {
        return indexToLine.back();
    }

    inline std::size_t lastColumn(std::size_t i) const {
        return i + 1 - lineToIndex[indexToLine.back() - 1];
    }

    const std::string& filename;
    bool additionalNext;
    std::vector<std::size_t> indexToLine;
    std::vector<std::size_t> lineToIndex;
};

static inline std::string s_replaceEscapeChar(const std::string& str) {
    static const std::pair<char, char> pairChars[] = {
        std::pair<char, char>('a', '\a'),  // Alert (bell, alarm)
        std::pair<char, char>('b', '\b'),  // Backspace
        std::pair<char, char>('f', '\f'),  // Form feed (new page)
        std::pair<char, char>('n', '\n'),  // New-line
        std::pair<char, char>('r', '\r'),  // Carriage return
        std::pair<char, char>('t', '\t'),  // Horizontal tab
        std::pair<char, char>('v', '\v'),  // Vertical tab
        std::pair<char, char>('\'', '\''), // Single quotation mark
        std::pair<char, char>('"', '\"'),  // Double quotation mark
        std::pair<char, char>('\\', '\\')  // Backslash
    };
    static const std::map<char, char> escapeChar(pairChars, pairChars + sizeof(pairChars) / sizeof(*pairChars));
    std::string ret(str);
    for (std::size_t i = 0; i < ret.size(); ++i) {
        if (ret[i] == '\\') {
            const std::map<char, char>::const_iterator cit = escapeChar.find(ret[i + 1]);
            if (cit != escapeChar.end()) {
                ret.erase(i, 1);
                ret[i] = cit->second;
            }
        }
    }
    return ret;
}

static inline void s_stringJumpSpace(const std::string& str, std::size_t& index) {
    while (::isspace(str[index])) {
        ++index;
    }
}

static inline void s_parseNull(std::size_t& i, blet::Dict& dict) {
    dict.newNull();
    i += sizeof("null") - 1;
}

static inline void s_parseBool(bool boolean, std::size_t& i, blet::Dict& dict) {
    dict.newBoolean(boolean);
    if (boolean) {
        i += sizeof("true") - 1;
    }
    else {
        i += sizeof("false") - 1;
    }
}

static inline void s_parseNumber(const JsonParseInfo& info, const std::string& str, std::size_t& i, blet::Dict& dict) {
    if (str[i] == '0' && ::isdigit(str[i + 1])) {
        throw ParseException(info.filename, info.line(i), info.column(i), "Octal number not allowed");
    }
    char* ret = NULL;
    double number = ::strtod(str.c_str() + i, &ret);
    dict.newNumber(number);
    std::size_t jump = ret - (str.c_str() + i);
    if (jump == 0) {
        throw ParseException(info.filename, info.line(i), info.column(i), "Bad number");
    }
    i += jump;
}

static inline void s_parseString(const JsonParseInfo& info, const std::string& str, std::size_t& i, blet::Dict& dict) {
    ++i; // jump '"'
    std::size_t start = i;
    // search end quote
    while (str[i] != '"') {
        if (str[i] == '\\' && (str[i + 1] == '"' || str[i + 1] == '\\')) {
            ++i;
        }
        else if (str[i] == '\0') {
            throw ParseException(info.filename, info.lastLine(i), info.lastColumn(i), "End of string");
        }
        else if (str[i] == '\n') {
            throw ParseException(info.filename, info.line(start), info.column(start), "New line in string");
        }
        ++i;
    }
    std::size_t end = i;
    ++i; // jump '"'
    dict.newString(s_replaceEscapeChar(str.substr(start, end - start)));
}

static inline blet::Dict& s_createNewObjectElement(const JsonParseInfo& info, const std::string& str, std::size_t& i,
                                                   blet::Dict& dict) {
    // parser key
    ++i; // jump '"'
    std::size_t start = i;
    // search end quote
    while (str[i] != '"') {
        if (str[i] == '\\' && (str[i + 1] == '"' || str[i + 1] == '\\')) {
            ++i;
        }
        else if (str[i] == '\0') {
            throw ParseException(info.filename, info.lastLine(i), info.lastColumn(i), "End of key");
        }
        else if (str[i] == '\n') {
            throw ParseException(info.filename, info.line(start), info.column(start), "New line in key");
        }
        ++i;
    }
    std::size_t end = i;
    ++i; // jump '"'
    s_stringJumpSpace(str, i);
    if (str[i] != ':') {
        throw ParseException(info.filename, info.line(i), info.column(i), "Need definition of object");
    }
    ++i; // jump ':'
    s_stringJumpSpace(str, i);
    // get key
    std::string key = s_replaceEscapeChar(str.substr(start, end - start));
    if (dict.unsafeGetObject().find(key) != dict.unsafeGetObject().end()) {
        throw ParseException(info.filename, info.line(start), info.column(start), "Key already exist");
    }
    return dict.unsafeGetObject()[key];
}

static inline blet::Dict& s_createNewArrayElement(blet::Dict& dict) {
    dict.unsafeGetArray().push_back(blet::Dict());
    return dict.unsafeGetArray().back();
}

static bool s_parseType(const JsonParseInfo& info, const std::string& str, std::size_t& i, blet::Dict& dict);

static inline void s_parseArray(const JsonParseInfo& info, const std::string& str, std::size_t& i, blet::Dict& dict) {
    dict.newArray();
    bool next = false;

    ++i; // jump '['
    s_stringJumpSpace(str, i);
    while (str[i] != ']' || (next == true && info.additionalNext == false)) {
        if (str[i] == '\0') {
            throw ParseException(info.filename, info.lastLine(i), info.lastColumn(i), "End of array not found");
        }
        // search array, object, string, number, bool or null
        if (!s_parseType(info, str, i, s_createNewArrayElement(dict))) {
            throw ParseException(info.filename, info.line(i), info.column(i), "Bad element of array");
        }
        s_stringJumpSpace(str, i);
        // next
        if (str[i] == ',') {
            ++i; // jump ','
            next = true;
            s_stringJumpSpace(str, i);
        }
        else {
            next = false;
        }
    }
    ++i; // jump ']'
}

static inline void s_parseObject(const JsonParseInfo& info, const std::string& str, std::size_t& i, blet::Dict& dict) {
    dict.newObject();
    bool next = false;

    ++i; // jump '{'
    s_stringJumpSpace(str, i);
    while (str[i] != '}' || (next == true && info.additionalNext == false)) {
        if (str[i] == '\0') {
            throw ParseException(info.filename, info.lastLine(i), info.lastColumn(i), "End of object not found");
        }
        else if (str[i] == '"') {
            // search array, object, string, number, bool or null
            if (!s_parseType(info, str, i, s_createNewObjectElement(info, str, i, dict))) {
                throw ParseException(info.filename, info.line(i), info.column(i), "Bad element in the key");
            }
        }
        else {
            throw ParseException(info.filename, info.line(i), info.column(i), "Key of object not found");
        }
        s_stringJumpSpace(str, i);
        // next
        if (str[i] == ',') {
            ++i; // jump ','
            next = true;
            s_stringJumpSpace(str, i);
        }
        else {
            next = false;
        }
    }
    ++i; // jump '}'
}

inline bool s_parseType(const JsonParseInfo& info, const std::string& str, std::size_t& i, blet::Dict& dict) {
    switch (str[i]) {
        case '[':
            s_parseArray(info, str, i, dict);
            break;
        case '{':
            s_parseObject(info, str, i, dict);
            break;
        case '"':
            s_parseString(info, str, i, dict);
            break;
        case '-':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            s_parseNumber(info, str, i, dict);
            break;
        case 't':
            if (!::strncmp(str.c_str() + i, "true", sizeof("true") - 1)) {
                s_parseBool(true, i, dict);
            }
            else {
                return false;
            }
            break;
        case 'f':
            if (!::strncmp(str.c_str() + i, "false", sizeof("false") - 1)) {
                s_parseBool(false, i, dict);
            }
            else {
                return false;
            }
            break;
        case 'n':
            if (!::strncmp(str.c_str() + i, "null", sizeof("null") - 1)) {
                s_parseNull(i, dict);
            }
            else {
                return false;
            }
            break;
        default:
            return false;
            break;
    }
    return true;
}

static inline void s_replaceCommentBySpace(std::string& str) {
    for (std::size_t i = 0; i < str.size() && str[i] != '\0'; ++i) {
        if (str[i] == '"') {
            ++i;
            while (str[i] != '"') {
                if (str[i] == '\\' && (str[i + 1] == '"' || str[i + 1] == '\\')) {
                    ++i; // escape character
                }
                if (str[i] == '\n' || str[i] == '\0') {
                    break;
                }
                ++i;
            }
        }
        else if (str[i] == '/' && str[i + 1] == '*') {
            str[i] = ' '; // replace '/'
            ++i;
            str[i] = ' '; // replace '*'
            ++i;
            while (str[i] != '\0' && (str[i] != '*' || str[i + 1] != '/')) {
                str[i] = ' ';
                ++i;
            }
            if (str[i] != '\0') {
                str[i] = ' '; // replace '*'
                ++i;
                str[i] = ' '; // replace '/'
            }
        }
        else if (str[i] == '/' && str[i + 1] == '/') {
            str[i] = ' ';
            ++i;
            str[i] = ' ';
            ++i;
            while (str[i] != '\0' && str[i] != '\n') {
                str[i] = ' ';
                ++i;
            }
        }
    }
}

static inline std::string s_streamToStr(JsonParseInfo& info, std::istream& stream) {
    // generate line and column index
    std::ostringstream oss("");
    std::string line("");
    std::size_t nLine = 1;
    info.lineToIndex.push_back(0);
    while (std::getline(stream, line)) {
        if (nLine > 1) {
            oss << '\n';
        }
        oss << line;
        info.lineToIndex.push_back(line.size() + 1 + info.lineToIndex.back());
        info.indexToLine.insert(info.indexToLine.end(), line.size() + 1, nLine);
        ++nLine;
    }
    return oss.str();
}

inline blet::Dict s_parseStream(std::istream& stream, const std::string& filename, bool comment, bool additionalNext) {
    JsonParseInfo info(filename, additionalNext);
    std::string str = s_streamToStr(info, stream);
    if (comment) {
        s_replaceCommentBySpace(str);
    }
    std::size_t i = 0;
    s_stringJumpSpace(str, i);
    try {
        blet::Dict dict;
        switch (str[i]) {
            case '{':
                s_parseObject(info, str, i, dict);
                s_stringJumpSpace(str, i);
                break;
            case '[':
                s_parseArray(info, str, i, dict);
                s_stringJumpSpace(str, i);
                break;
            case '\0':
                return dict;
            default:
                throw ParseException(info.filename, info.line(i), info.column(i), "Not a valid start character");
        }
        if (str[i] != '\0') {
            throw ParseException(info.filename, info.line(i), info.column(i), "Not a valid end character");
        }
        return dict;
    }
    catch (const ParseException& /*e*/) {
        throw;
    }
}

inline blet::Dict parseFile(const char* filename, bool comment, bool additionalNext) {
    std::ifstream fileStream(filename); // open file
    if (fileStream.is_open()) {
        blet::Dict dict = s_parseStream(fileStream, filename, comment, additionalNext);
        return dict;
    }
    else {
        throw ParseException(filename, "Open file failed");
    }
}

inline blet::Dict parseStream(std::istream& stream, bool comment, bool additionalNext) {
    return s_parseStream(stream, std::string(), comment, additionalNext);
}

inline blet::Dict parseString(const std::string& str, bool comment, bool additionalNext) {
    std::istringstream iss(str);
    return parseStream(iss, comment, additionalNext);
}

inline blet::Dict parseData(const void* data, std::size_t size, bool comment, bool additionalNext) {
    return parseString(std::string(static_cast<const char*>(data), size), comment, additionalNext);
}

} // namespace json

} // namespace blet

#endif // #ifndef _AMALGAMATE_GUARD__SINGLE_INCLUDE_BLET_JSON_H_